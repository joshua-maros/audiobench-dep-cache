# This is a basic workflow that is manually triggered

name: Rebuild cache

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    inputs:
      tagName:
        description: "What the release should be called."
        required: true
        default: "v2"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_all:
    name: Build ${{ matrix.dependency }} on ${{ matrix.os }}
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #dependency: ['dep_julia', 'dep_julia_packages', 'dep_llvm', 'dep_juce']
        dependency: ['dep_julia_packages']
        os: ['ubuntu-latest', 'windows-latest', 'macOS-latest']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Get source code
      run: |
        git clone https://github.com/joshua-maros/audiobench.git -b beta --depth 1
    - name: Execute ./build.py ${{ matrix.dependency }}
      run: |
        cd audiobench
        ./build.py ${{ matrix.dependency }}
    - name: Upload result
      uses: actions/upload-artifact@v2.2.2
      with:
        name: ${{ matrix.dependency }} on ${{ matrix.os }}
        path: audiobench/dependencies/
        if-no-files-found: error
  
  release:
    runs-on: ubuntu-latest
    needs: [build_all]
    steps:
      - name: Start all bundles
        run: |
          mkdir linux
          mkdir mac
          mkdir windows
      - name: Retrieve dep_julia_packages on linux
        uses: actions/download-artifact@v2.0.8
        with:
          name: dep_julia_packages on ubuntu-latest
          path: linux/
      - name: Compress all bundles
        run: |
          cd linux
          zip linux.zip -r *
          cd ..
          cd mac
          zip mac.zip -r *
          cd ..
          cd windows
          zip windows.zip -r *
          cd ..
      - name: Set UUID
        id: generate-uuid
        uses: filipstefansson/uuid-action@v1
      - name: Start release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.generate-uuid.outputs.uuid }}
          release_name: Automatic update
          body: |
            Contains the result of running ./build.py deps
          draft: false
          prerelease: false      
      - name: Upload Linux bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: linux/linux.zip
          asset_name: linux.zip
          asset_content_type: application/zip
      - name: Upload Mac bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: mac/mac.zip
          asset_name: mac.zip
          asset_content_type: application/zip
      - name: Upload Windows bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: windows/windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip
